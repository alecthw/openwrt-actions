name: build-private

on:
  workflow_dispatch:
  schedule:
    - cron: 0 20 * * 2,5
  # push:
  #   branches:
  #     - master
  #   paths:
  #     - "start"
  # release:
  #   types: [published]

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write # for release creation

    name: Build ${{matrix.location}}:${{matrix.target}}

    runs-on: ubuntu-22.04

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    strategy:
      fail-fast: false
      # max-parallel: 2
      matrix:
        location:
          - ysh
          - ha
        target:
          - lede-openclash-x86-amd64
          - immortalwrt-openclash-x86-amd64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check server configuration
        run: |
          echo -e "--------------------------CPU Info--------------------------"
          echo "CPU Physical Num: $(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU Core Num: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------Memory Info--------------------------"
          echo "Installed Memory Details:"
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "---------------------------Disk Info---------------------------"
          echo -e  "Disk Num: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "Disk Details:"
          df -Th

      - name: Set Date
        run: |
          date=$(date +%Y-%m-%d)
          echo "DATE=${date}" >> $GITHUB_ENV

      - name: Initialize environment
        if: env.ACT != 'true'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E swapoff -a
          sudo -E rm -f /swapfile /mnt/swapfile
          sudo -E docker image prune -a -f
          sudo -E systemctl stop docker
          sudo -E snap set system refresh.retain=2
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt -y install clang llvm npm
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt -y clean
          sudo -E apt -y autoclean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Create Swap
        if: env.ACT != 'true'
        run: |
          sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192
          sudo chmod 600 /mnt/swapfile
          sudo mkswap /mnt/swapfile
          sudo swapon /mnt/swapfile
          free -h | grep -i swap

      - name: Create simulated physical disk
        if: env.ACT != 'true'
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner.runner /builder

      - name: Check disk info after initialization
        run: |
          echo -e  "Disk Num: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "Disk Details:"
          df -Th

      - name: Set git identity
        if: env.ACT != 'true'
        run: |
          git config --global user.email "22856212+alecthw@users.noreply.github.com"
          git config --global user.name "alecthw"

      - name: Load Settings.ini
        run: |
          source "${GITHUB_WORKSPACE}/user/${{matrix.target}}/settings.ini"
          echo "REPO_URL=${REPO_URL}"                           >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}"                     >> $GITHUB_ENV
          echo "DEFCONFIG_FILE=${DEFCONFIG_FILE}"               >> $GITHUB_ENV
          echo "LOAD_CUSTOM_CONFIG=${LOAD_CUSTOM_CONFIG}"       >> $GITHUB_ENV
          echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}"     >> $GITHUB_ENV
          echo "UPLOAD_TARGETS_DIR=${UPLOAD_TARGETS_DIR}"       >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}"             >> $GITHUB_ENV
          echo "UPLOAD_TO_ARTIFACTS=${UPLOAD_TO_ARTIFACTS}"     >> $GITHUB_ENV
          echo "UPLOAD_TO_RELEASE=${UPLOAD_TO_RELEASE}"         >> $GITHUB_ENV

      - name: Clone private config
        env:
          REPO_URL: https://${{github.actor}}:${{secrets.PERSONAL_TOKEN}}@github.com/alecthw/archive.git
        run: |
          git clone --depth 1 --single-branch $REPO_URL
          rm -rf app_config
          cp -rf archive/app_config/base app_config
          if [ -d "archive/app_config/${{matrix.location}}" ]; then
          (
            cp -rf archive/app_config/${{matrix.location}}/* app_config/
          )
          fi

      - name: Clone source code
        if: env.ACT != 'true'
        working-directory: /builder
        run: |
          git clone --depth 1 --single-branch -b ${{env.REPO_BRANCH}} ${{env.REPO_URL}} openwrt
          ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt

      - name: Clone source code for act build
        if: env.ACT == 'true'
        run: |
          git clone --depth 1 --single-branch -b ${{env.REPO_BRANCH}} ${{env.REPO_URL}} openwrt

      - name: Apply patches
        run: |
          echo "Apply patches"
          if [ -n "$(ls -A "user/common/patches" 2>/dev/null)" ]; then
          (
            find "user/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
          )
          fi
          if [ -n "$(ls -A "user/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          (
            find "user/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
          )
          fi

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Copy custom files
        run: |
          echo "Apply files..."
          mkdir -p openwrt/files
          if [ -d "user/common/files" ]; then
          (
            cp -rf user/common/files/* openwrt/files/
          )
          fi
          if [ -d "user/${{matrix.target}}/files" ]; then
          (
            cp -rf user/${{matrix.target}}/files/* openwrt/files/
          )
          fi

      - name: Load custom script
        run: |
          echo "Apply custom.sh"
          cd openwrt
          if [ -f "$GITHUB_WORKSPACE/user/common/custom.sh" ]; then
          (
            /bin/bash "$GITHUB_WORKSPACE/user/common/custom.sh" ${{matrix.target}}
          )
          fi
          if [ -f "$GITHUB_WORKSPACE/user/${{matrix.target}}/custom.sh" ]; then
          (
            /bin/bash "$GITHUB_WORKSPACE/user/${{matrix.target}}/custom.sh"
          )
          fi

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        if: env.LOAD_CUSTOM_CONFIG == 'true'
        run: |
          echo "Apply app_config.sh"
          cd openwrt
          if [ -f "$GITHUB_WORKSPACE/app_config.sh" ]; then
          (
            /bin/bash "$GITHUB_WORKSPACE/app_config.sh" ${{matrix.target}}
          )
          fi

      - name: Modify hostname
        run: |
          cd openwrt
          sed -i "s/hostname='LEDE'/hostname='LEDE-${{matrix.location}}'/g" package/base-files/files/bin/config_generate
          sed -i "s/hostname='ImmortalWrt'/hostname='ImmortalWrt-${{matrix.location}}'/g" package/base-files/files/bin/config_generate

      - name: Copy build config
        id: config
        run: |
          cd openwrt
          cp $GITHUB_WORKSPACE/user/${{matrix.target}}/${{env.DEFCONFIG_FILE}} .config
          if [ -f "$GITHUB_WORKSPACE/app_config/${{matrix.target}}.diff" ]; then
          (
            cp $GITHUB_WORKSPACE/app_config/${{matrix.target}}.diff .config
          )
          fi
          make defconfig

      - name: Download package
        id: package
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Assemble Firmware
        run: |
          rm -rf ./Firmware/
          mkdir -p ./Firmware/
          ls -l openwrt/bin/targets/*/*
          cp -f openwrt/.config ./Firmware/config
          find openwrt/bin/targets/ -name "*.buildinfo" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "sha256sums" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*rootfs*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*qcow2*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*vhdx*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*vmdk*" | xargs -i mv -f {} ./Firmware/
          ls -l ./Firmware

      - name: Upload Firmware to release
        if: env.ACT != 'true' && env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_RELEASE == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
        uses: ncipollo/release-action@v1
        with:
          repo: archive
          name: R${{env.DATE}} for ${{matrix.location}}:${{matrix.target}}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{matrix.location}}_${{matrix.target}}
          commit: master
          token: ${{secrets.PERSONAL_TOKEN}}
          artifacts: ./Firmware/*
          body: |
            - This is a private firmware.
