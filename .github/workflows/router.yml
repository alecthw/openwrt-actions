name: router

on:
  workflow_dispatch:
  schedule:
    - cron: 0 22 * * 4
  # push:
  #   branches:
  #     - master
  #   paths:
  #     - "start"
  # release:
  #   types: [published]

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write # for release creation

    name: Build ${{matrix.target}}

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    strategy:
      fail-fast: false
      # max-parallel: 2
      matrix:
        target: [lede-common-wrt1900acs, lede-common-newifi_d2]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check server configuration
        run: |
          echo -e "--------------------------CPU Info--------------------------"
          echo "CPU Physical Num: $(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU Core Num: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------Memory Info--------------------------"
          echo "Installed Memory Details:"
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "---------------------------Disk Info---------------------------"
          echo -e  "Disk Num: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "Disk Details:"
          df -Th

      - name: Set Date
        run: |
          date=$(date +%Y-%m-%d)
          echo "DATE=${date}" >> $GITHUB_ENV

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: Set git identity
        run: |
          git config --global user.email "22856212+alecthw@users.noreply.github.com"
          git config --global user.name "alecthw"

      - name: Load Settings.ini
        run: |
          source "${GITHUB_WORKSPACE}/user/${{matrix.target}}/settings.ini"
          echo "REPO_URL=${REPO_URL}"                           >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}"                     >> $GITHUB_ENV
          echo "CONFIG_FILE=${CONFIG_FILE}"                     >> $GITHUB_ENV
          echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}"     >> $GITHUB_ENV
          echo "UPLOAD_TARGETS_DIR=${UPLOAD_TARGETS_DIR}"       >> $GITHUB_ENV
          echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}"             >> $GITHUB_ENV
          echo "UPLOAD_TO_ARTIFACTS=${UPLOAD_TO_ARTIFACTS}"     >> $GITHUB_ENV
          echo "UPLOAD_TO_RELEASE=${UPLOAD_TO_RELEASE}"         >> $GITHUB_ENV

      - name: Clone source code
        run: |
          git clone --depth=1 -b ${{env.REPO_BRANCH}} ${{env.REPO_URL}} openwrt

      - name: Apply patches
        run: |
          echo "Apply patches"
          if [ -n "$(ls -A "user/common/patches" 2>/dev/null)" ]; then
          (
            find "user/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
          )
          fi
          if [ -n "$(ls -A "user/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          (
            find "user/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d 'openwrt' -p0 --forward"
          )
          fi

      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Copy custom files
        run: |
          echo "Apply files..."
          if [ -n "$(ls -A "user/common/files" 2>/dev/null)" ]; then
          (
            cp -rf user/common/files/* openwrt/package/base-files/files/
          )
          fi
          if [ -n "$(ls -A "user/${{matrix.target}}/files" 2>/dev/null)" ]; then
          (
            cp -rf user/${{matrix.target}}/files/* openwrt/package/base-files/files/
          )
          fi

      - name: Load custom script
        run: |
          echo "Apply custom.sh"
          cd openwrt
          if [ -f "../user/common/custom.sh" ]; then
          (
            /bin/bash "../user/common/custom.sh" ${{matrix.target}}
          )
          fi
          if [ -f "../user/${{matrix.target}}/custom.sh" ]; then
          (
            /bin/bash "../user/${{matrix.target}}/custom.sh"
          )
          fi

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          echo "Apply config.sh"
          cd openwrt
          if [ -f "../user/common/config.sh" ]; then
          (
            /bin/bash "../user/common/config.sh" ${{matrix.target}}
          )
          fi

      - name: Copy build config
        id: config
        run: |
          cd openwrt
          cp ../user/${{matrix.target}}/${{env.CONFIG_FILE}} .config
          make defconfig

      - name: Download package
        id: package
        run: |
          cd openwrt
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Pack packages_dir
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/packages/
          tar -cvf ${{matrix.target}}_packages.tar ./
          mv *.tar ..

      - name: Pack targets_dir
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/
          tar -cvf ${{matrix.target}}_targets.tar ./
          mv *.tar ..

      - name: Assemble Firmware
        run: |
          rm -rf ./Firmware/
          mkdir -p ./Firmware/
          cp -f openwrt/.config ./Firmware/
          find openwrt/bin/targets/ -name "*sysupgrade*bin*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*sysupgrade*img*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*combined*img*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*factory*img*" | xargs -i mv -f {} ./Firmware/
          find openwrt/bin/targets/ -name "*vmdk*" | xargs -i mv -f {} ./Firmware/
          cd ./Firmware
          ls -l

      - name: Upload packages directory
        if: env.UPLOAD_PACKAGES_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_packages_${{matrix.target}}
          path: openwrt/bin/packages

      - name: Upload targets directory
        if: env.UPLOAD_TARGETS_DIR == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_targets_${{matrix.target}}
          path: openwrt/bin/targets

      - name: Upload Firmware to artifact
        if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_ARTIFACTS == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt_firmware_${{matrix.target}}
          path: ./Firmware/

      - name: Upload Firmware to release
        if: env.UPLOAD_FIRMWARE == 'true' && env.UPLOAD_TO_RELEASE == 'true' && !cancelled() && steps.compile.outputs.status == 'success'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for router
          allowUpdates: true
          removeArtifacts: true
          tag: router
          commit: master
          token: ${{ secrets.PERSONAL_TOKEN }}
          artifacts: ./Firmware/*
          body: |
            - For low-memory router like newifi_d2!
            - Default IP: 192.168.11.1/24
            - Default Password:
